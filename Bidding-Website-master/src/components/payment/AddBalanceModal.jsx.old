import React, { useState, useEffect } from 'react';
import { FiX, FiCreditCard, FiSmartphone, FiDollarSign, FiLock, FiCheck } from 'react-icons/fi';
import { paymentApiService, demoPaymentUtils } from '../../services/paymentApi';
import { showSuccess, showError } from '../../redux/slices/notificationSlice';
import { useDispatch } from 'react-redux';

const AddBalanceModal = ({ isOpen, onClose, onSuccess }) => {
  const [step, setStep] = useState(1); // 1: Amount, 2: Payment Method, 3: Details, 4: Processing, 5: Success
  const [amount, setAmount] = useState('');
  const [selectedMethod, setSelectedMethod] = useState('DEMO_CARD');
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [cardDetails, setCardDetails] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    cardholderName: ''
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const dispatch = useDispatch();

  useEffect(() => {
    if (isOpen) {
      fetchPaymentMethods();
      resetForm();
    }
  }, [isOpen]);

  const fetchPaymentMethods = async () => {
    try {
      const response = await paymentApiService.getPaymentMethods();
      setPaymentMethods(response.paymentMethods || []);
    } catch (error) {
      console.error('Error fetching payment methods:', error);
    }
  };

  const resetForm = () => {
    setStep(1);
    setAmount('');
    setSelectedMethod('DEMO_CARD');
    setCardDetails({
      cardNumber: '',
      expiryDate: '',
      cvv: '',
      cardholderName: ''
    });
    setErrors({});
    setLoading(false);
  };

  const validateAmount = () => {
    const numAmount = parseFloat(amount);
    if (!amount || isNaN(numAmount)) {
      setErrors({ amount: 'Please enter a valid amount' });
      return false;
    }
    if (numAmount < 10) {
      setErrors({ amount: 'Minimum amount is 10 ETB' });
      return false;
    }
    if (numAmount > 50000) {
      setErrors({ amount: 'Maximum amount is 50,000 ETB' });
      return false;
    }
    setErrors({});
    return true;
  };

  const validateCardDetails = () => {
    const newErrors = {};
    
    if (!cardDetails.cardNumber || cardDetails.cardNumber.replace(/\s/g, '').length !== 16) {
      newErrors.cardNumber = 'Please enter a valid 16-digit card number';
    }
    
    if (!cardDetails.expiryDate || !/^(0[1-9]|1[0-2])\/\d{2}$/.test(cardDetails.expiryDate)) {
      newErrors.expiryDate = 'Please enter a valid expiry date (MM/YY)';
    }
    
    if (!cardDetails.cvv || !/^\d{3,4}$/.test(cardDetails.cvv)) {
      newErrors.cvv = 'Please enter a valid CVV';
    }
    
    if (!cardDetails.cardholderName || cardDetails.cardholderName.trim().length < 2) {
      newErrors.cardholderName = 'Please enter the cardholder name';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleAmountNext = () => {
    if (validateAmount()) {
      setStep(2);
    }
  };

  const handleMethodNext = () => {
    setStep(3);
  };

  const handleCardNumberChange = (e) => {
    const formatted = demoPaymentUtils.formatCardNumber(e.target.value);
    setCardDetails(prev => ({ ...prev, cardNumber: formatted }));
  };

  const handleExpiryChange = (e) => {
    const formatted = demoPaymentUtils.formatExpiryDate(e.target.value);
    setCardDetails(prev => ({ ...prev, expiryDate: formatted }));
  };

  const handleSubmit = async () => {
    if (selectedMethod === 'DEMO_CARD' && !validateCardDetails()) {
      return;
    }

    setLoading(true);
    setStep(4);

    try {
      const response = await paymentApiService.addBalance(
        parseFloat(amount),
        selectedMethod,
        selectedMethod === 'DEMO_CARD' ? cardDetails : null
      );

      setStep(5);
      dispatch(showSuccess(`Successfully added ${demoPaymentUtils.formatAmount(parseFloat(amount))} to your account`));
      
      if (onSuccess) {
        onSuccess(response);
      }

      // Auto close after 3 seconds
      setTimeout(() => {
        onClose();
      }, 3000);

    } catch (error) {
      console.error('Payment error:', error);
      dispatch(showError(error || 'Payment failed. Please try again.'));
      setStep(3); // Go back to details step
    } finally {
      setLoading(false);
    }
  };

  const getMethodIcon = (method) => {
    switch (method) {
      case 'DEMO_CARD': return <FiCreditCard />;
      case 'DEMO_MOBILE': return <FiSmartphone />;
      default: return <FiDollarSign />;
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">Add Balance</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <FiX size={24} />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Step 1: Amount */}
          {step === 1 && (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Amount to Add
                </label>
                <div className="relative">
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="Enter amount"
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green focus:border-green ${
                      errors.amount ? 'border-red-500' : 'border-gray-300'
                    }`}
                    min="10"
                    max="50000"
                    step="0.01"
                  />
                  <span className="absolute right-3 top-3 text-gray-500">ETB</span>
                </div>
                {errors.amount && (
                  <p className="text-red-500 text-sm mt-1">{errors.amount}</p>
                )}
              </div>

              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">Demo Payment Notice</h4>
                <p className="text-sm text-blue-800">
                  This is a demo payment system. No real money will be charged. 
                  Use any demo card details for testing.
                </p>
              </div>

              <button
                onClick={handleAmountNext}
                className="w-full bg-green text-white py-3 px-4 rounded-lg hover:bg-green-600 transition-colors font-medium"
              >
                Continue
              </button>
            </div>
          )}

          {/* Step 2: Payment Method */}
          {step === 2 && (
            <div className="space-y-4">
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">
                  Select Payment Method
                </h3>
                <div className="space-y-3">
                  {paymentMethods.map((method) => (
                    <label
                      key={method.id}
                      className={`flex items-center p-4 border rounded-lg cursor-pointer transition-colors ${
                        selectedMethod === method.id
                          ? 'border-green bg-green-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <input
                        type="radio"
                        name="paymentMethod"
                        value={method.id}
                        checked={selectedMethod === method.id}
                        onChange={(e) => setSelectedMethod(e.target.value)}
                        className="sr-only"
                      />
                      <div className="flex items-center gap-3 flex-1">
                        <div className="text-xl">{getMethodIcon(method.id)}</div>
                        <div>
                          <div className="font-medium text-gray-900">{method.name}</div>
                          <div className="text-sm text-gray-600">{method.description}</div>
                          <div className="text-xs text-gray-500">{method.processingTime}</div>
                        </div>
                      </div>
                      {selectedMethod === method.id && (
                        <FiCheck className="text-green" />
                      )}
                    </label>
                  ))}
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => setStep(1)}
                  className="flex-1 bg-gray-100 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-200 transition-colors font-medium"
                >
                  Back
                </button>
                <button
                  onClick={handleMethodNext}
                  className="flex-1 bg-green text-white py-3 px-4 rounded-lg hover:bg-green-600 transition-colors font-medium"
                >
                  Continue
                </button>
              </div>
            </div>
          )}

          {/* Step 3: Payment Details */}
          {step === 3 && (
            <div className="space-y-4">
              <div className="bg-gray-50 p-4 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Amount:</span>
                  <span className="font-semibold text-lg">{demoPaymentUtils.formatAmount(parseFloat(amount))}</span>
                </div>
              </div>

              {selectedMethod === 'DEMO_CARD' && (
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-900">Card Details</h3>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Card Number
                    </label>
                    <input
                      type="text"
                      value={cardDetails.cardNumber}
                      onChange={handleCardNumberChange}
                      placeholder="1234 5678 9012 3456"
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green focus:border-green ${
                        errors.cardNumber ? 'border-red-500' : 'border-gray-300'
                      }`}
                      maxLength="19"
                    />
                    {errors.cardNumber && (
                      <p className="text-red-500 text-sm mt-1">{errors.cardNumber}</p>
                    )}
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Expiry Date
                      </label>
                      <input
                        type="text"
                        value={cardDetails.expiryDate}
                        onChange={handleExpiryChange}
                        placeholder="MM/YY"
                        className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green focus:border-green ${
                          errors.expiryDate ? 'border-red-500' : 'border-gray-300'
                        }`}
                        maxLength="5"
                      />
                      {errors.expiryDate && (
                        <p className="text-red-500 text-sm mt-1">{errors.expiryDate}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        CVV
                      </label>
                      <input
                        type="text"
                        value={cardDetails.cvv}
                        onChange={(e) => setCardDetails(prev => ({ ...prev, cvv: e.target.value.replace(/\D/g, '') }))}
                        placeholder="123"
                        className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green focus:border-green ${
                          errors.cvv ? 'border-red-500' : 'border-gray-300'
                        }`}
                        maxLength="4"
                      />
                      {errors.cvv && (
                        <p className="text-red-500 text-sm mt-1">{errors.cvv}</p>
                      )}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Cardholder Name
                    </label>
                    <input
                      type="text"
                      value={cardDetails.cardholderName}
                      onChange={(e) => setCardDetails(prev => ({ ...prev, cardholderName: e.target.value }))}
                      placeholder="John Doe"
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green focus:border-green ${
                        errors.cardholderName ? 'border-red-500' : 'border-gray-300'
                      }`}
                    />
                    {errors.cardholderName && (
                      <p className="text-red-500 text-sm mt-1">{errors.cardholderName}</p>
                    )}
                  </div>
                </div>
              )}

              <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                <div className="flex items-center gap-2 text-yellow-800">
                  <FiLock size={16} />
                  <span className="text-sm font-medium">Demo Payment - No Real Charges</span>
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => setStep(2)}
                  className="flex-1 bg-gray-100 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-200 transition-colors font-medium"
                >
                  Back
                </button>
                <button
                  onClick={handleSubmit}
                  disabled={loading}
                  className="flex-1 bg-green text-white py-3 px-4 rounded-lg hover:bg-green-600 transition-colors font-medium disabled:opacity-50"
                >
                  {loading ? 'Processing...' : 'Add Balance'}
                </button>
              </div>
            </div>
          )}

          {/* Step 4: Processing */}
          {step === 4 && (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green mx-auto mb-4"></div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Processing Payment</h3>
              <p className="text-gray-600">Please wait while we process your payment...</p>
            </div>
          )}

          {/* Step 5: Success */}
          {step === 5 && (
            <div className="text-center py-8">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <FiCheck className="text-green text-xl" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Payment Successful!</h3>
              <p className="text-gray-600 mb-4">
                {demoPaymentUtils.formatAmount(parseFloat(amount))} has been added to your account.
              </p>
              <button
                onClick={onClose}
                className="bg-green text-white py-2 px-6 rounded-lg hover:bg-green-600 transition-colors font-medium"
              >
                Done
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AddBalanceModal;
